swagger: '2.0'
info:
  title: Functions REST API
  version: '1.0'
  description: |
    The Functions REST API is a secondary API provided by the Query service.
    This API enables you to manage the JavaScript libraries and objects that are used to create N1QL user-defined functions.

    The API schemes and host URLs are as follows:{blank}

    * `+http://node:8093/+`
    * `+https://node:18093/+` (for secure access)

    where [.var]`node` is the host name or IP address of a computer running the N1QL query engine.

produces:
  - application/json

consumes:
  - application/json

paths:
  /functions/v1/libraries:
    get:
      operationId: get_collection
      summary: Read All Libraries
      description: Returns all libraries and functions.
      security:
        - Default: []
      responses:
        "200":
          description: An array of objects, each of which gives information about one library.
          schema:
            $ref: "#/definitions/Collections"
    post:
      operationId: post_collection
      summary: Create or Update a Collection of Libraries
      description: |
        Creates the specified libraries and their associated functions.
        If any specified library exists, the functions specified in the body for that library are appended to the existing library.
        If any specified function exists within an existing library, the existing function is overwritten.
      parameters:
        - $ref: "#/parameters/BodyCollection"
      security:
        - Default: []
      responses:
        "200":
          $ref: '#/responses/OK'
        "500":
          $ref: '#/responses/InternalServerError'
    delete:
      operationId: delete_collection
      summary: Delete All Libraries
      description: Deletes all libraries entirely.
      security:
        - Default: []
      responses:
        "200":
          $ref: '#/responses/OK'
    put:
      operationId: put_collection
      summary: Replace All Libraries
      description: |
        This has exactly the same effect as <<_delete_collection,deleting all libraries>> followed by <<_post_collection,creating a collection of libraries>>.
        That is, all existing libraries in the system are deleted, and the libraries specified in the body of this call are created, resulting in the system having exclusively the libraries specified by this call.
      parameters:
        - $ref: "#/parameters/BodyCollection"
      security:
        - Default: []
      responses:
        "200":
          $ref: '#/responses/OK'
        "500":
          $ref: '#/responses/InternalServerError'

  /functions/v1/libraries/{library}:
    parameters:
      - $ref: "#/parameters/PathLibrary"
    get:
      operationId: get_library
      summary: Read a Library
      description: Returns a library with all its functions.
      security:
        - Default: []
      responses:
        "200":
          description: An object giving information about the specified library.
          schema:
            $ref: "#/definitions/Libraries"
        "404":
          $ref: '#/responses/LibraryNotFound'
    post:
      operationId: post_library
      summary: Create or Update a Library
      description: |
        Creates the specified library and its associated functions.
        If the specified library exists, the functions specified are added to the existing library.
        If a specified function exists within the existing library, the existing function is overwritten.
      parameters:
        - $ref: "#/parameters/BodyLibrary"
      security:
        - Default: []
      responses:
        "200":
          $ref: '#/responses/OK'
        "400":
          $ref: '#/responses/LibraryBadRequest'
        "500":
          $ref: '#/responses/InternalServerError'
    delete:
      operationId: delete_library
      summary: Delete a Library
      description: Deletes the specified library entirely.
      security:
        - Default: []
      responses:
        "200":
          $ref: '#/responses/OK'
        "404":
          $ref: '#/responses/LibraryNotFound'
    put:
      operationId: put_library
      summary: Replace a Library
      description: |
        This has exactly the same effect as <<_delete_library,deleting a library>> followed by <<_post_library,creating a library>>.
        That is, if the library exists, it is deleted entirely and replaced with the contents of the library specified in the body of this call, resulting in the library having only functions specified by this call exclusively.
      parameters:
        - $ref: "#/parameters/BodyLibrary"
      security:
        - Default: []
      responses:
        "200":
          $ref: '#/responses/OK'
        "400":
          $ref: '#/responses/LibraryBadRequest'
        "500":
          $ref: '#/responses/InternalServerError'

  /functions/v1/libraries/{library}/functions/{function}:
    parameters:
      - $ref: "#/parameters/PathLibrary"
      - $ref: "#/parameters/PathFunction"
    get:
      operationId: get_function
      summary: Read a Function
      description: Returns the specified function from the specified library.
      security:
        - Default: []
      responses:
        "200":
          description: An object giving information about the specified function.
          schema:
            $ref: "#/definitions/Functions"
        "404":
          $ref: '#/responses/FunctionNotFound'
    post:
      operationId: post_function
      summary: Create or Update a Function
      description: |
        Creates the specified function in the specified library.
        If the specified library does not exist, the library is created.
        If the function already exists in the specified library, the existing function is overwritten.

        [NOTE]
        ====
        Within the function object, the value of the `name` property must match the name of the JavaScript function that returns the result, as specified by the `code` property.
        If they do not match, you may get an evaluation error when you attempt to execute a N1QL user-defined function based on this code.
        ====
      parameters:
        - $ref: "#/parameters/BodyFunction"
      security:
        - Default: []
      responses:
        "200":
          $ref: '#/responses/OK'
        "400":
          $ref: '#/responses/FunctionBadRequest'
        "500":
          $ref: '#/responses/InternalServerError'
    delete:
      operationId: delete_function
      summary: Delete a Function
      description: Deletes the specified function in the specified library.
      security:
        - Default: []
      responses:
        "200":
          $ref: '#/responses/OK'
        "404":
          $ref: '#/responses/FunctionNotFound'
    put:
      operationId: put_function
      summary: Replace a Function
      description: |
        This has exactly the same effect as <<_post_function,creating or updating a function>>, and is included for completeness.
      parameters:
        - $ref: "#/parameters/BodyFunction"
      security:
        - Default: []
      responses:
        "200":
          $ref: '#/responses/OK'
        "400":
          $ref: '#/responses/FunctionBadRequest'
        "500":
          $ref: '#/responses/InternalServerError'

parameters:
  PathLibrary:
    name: library
    type: string
    in: path
    required: true
    description: The name of a library.

  PathFunction:
    name: function
    type: string
    in: path
    required: true
    description: The name of a function.

  BodyCollection:
    in: body
    name: Collection Definition
    description: An array of objects, each of which gives information about one library.
    required: true
    schema:
      $ref: "#/definitions/Collections"

  BodyLibrary:
    in: body
    name: Library Definition
    required: true
    description: |
      An object specifying a library.

      [NOTE]
      ====
      The `name` property in the library object must match the library name specified in the path.
      ====
    schema:
      $ref: "#/definitions/Libraries"

  BodyFunction:
    in: body
    name: Function Definition
    required: true
    description: |
      An object specifying a function.

      [NOTE]
      ====
      The `name` property in the function object must match the function name specified in the path.
      ====
    schema:
      $ref: "#/definitions/Functions"

definitions:
  Collections:
    type: array
    title: Collection Definition
    items:
      $ref: "#/definitions/Libraries"

  Libraries:
    type: object
    title: Library Definition
    properties:
      name:
        type: string
        description: The name of the library.
        example: math
      functions:
        type: array
        description: An array of objects, each of which gives information about one function.
#       example:
#         - name: adder
#           id: d8:91:45:37:79:75:eb:15
#           code: function adder(a, b) { return a + b; }
#         - name: multiplier
#           id: 8e:ab:89:e6:1e:c2:21:1a
#           code: function multiplier(a, b) { return a * b; }
        items:
          $ref: '#/definitions/Functions'
    required:
      - name
      - functions

  Functions:
    type: object
    title: Function Definition
    properties:
      name:
        type: string
        description: |
          The name of the function.
          This must match the name of the JavaScript function that returns the result, as specified by the `code` property.
        example: f2c
      id:
        type: string
        description: |
          A unique ID for the function.
          You do not need to specify an ID when creating or updating a function.
          An ID is generated automatically if you do not specify one.
        example: c4:1a:39:46:46:88:ff:3d
      code:
        type: string
        description: |
          The JavaScript code for the function.
          The name of the JavaScript function that returns the result must match the name specified by the `name` property.
          The JavaScript code may contain other helper functions.
        example: function f2c(f) { return (5/9)*(f-32); }
    required:
      - name
      - code

responses:
  OK:
    description: The operation was successful.

  LibraryNotFound:
    description: |
      Not found.
      The library name in the path may be incorrect.

  FunctionNotFound:
    description: |
      Not found.
      The library name or function name in the path may be incorrect.

  LibraryBadRequest:
    description: |
      Bad request.
      The library name in the path might not match the name in the body of the request.

  FunctionBadRequest:
    description: |
      Bad request.
      The function name in the path might not match the name in the body of the request.

  InternalServerError:
    description: |
      Internal server error.
      The body of the request may be incorrect.

securityDefinitions:
  Default:
    type: basic
    description: |
      The Functions API supports admin credentials.
      Credentials can be passed via HTTP headers (HTTP basic authentication).
